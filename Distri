package com.rbs.bdd.application.service;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import com.rbs.bdd.application.exception.SchemaValidationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPMessage;
import java.io.File;
import java.io.FileInputStream;

import static org.junit.jupiter.api.Assertions.*;

class AccountValidationServiceTest {

    private AccountValidationService accountValidationService;

    @BeforeEach
    void setUp() {
        accountValidationService = new AccountValidationService();
    }

    /**
     * Loads and unmarshals static-request.xml into ValidateArrangementForPaymentRequest.
     */
    private ValidateArrangementForPaymentRequest loadRequestFromXml() throws Exception {
        File file = new File("src/test/resources/static-request/static-request.xml");
        JAXBContext context = JAXBContext.newInstance(ValidateArrangementForPaymentRequest.class);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        return (ValidateArrangementForPaymentRequest) unmarshaller.unmarshal(new FileInputStream(file));
    }

    /**
     * Creates an empty SOAP message used for validating the response injection.
     */
    private WebServiceMessage createEmptySoapMessage() {
        try {
            SOAPMessage soapMessage = MessageFactory.newInstance().createMessage();
            return new SaajSoapMessage(soapMessage);
        } catch (Exception e) {
            throw new RuntimeException("Unable to create SOAP message", e);
        }
    }

    @Test
    void testValidateSchemaShouldPass() throws Exception {
        ValidateArrangementForPaymentRequest request = loadRequestFromXml();
        assertDoesNotThrow(() -> accountValidationService.validateSchema(request));
    }

    @Test
    void testValidateBusinessRulesShouldModifySoapMessage() throws Exception {
        ValidateArrangementForPaymentRequest request = loadRequestFromXml();
        WebServiceMessage message = createEmptySoapMessage();

        assertDoesNotThrow(() -> accountValidationService.validateBusinessRules(request, message));

        // Optional: Add assertion logic to inspect the modified SOAP message
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        message.writeTo(outputStream);
        String soapContent = outputStream.toString();

        assertTrue(soapContent.contains("ModifiedESP"));
        assertTrue(soapContent.contains("ModifiedTxn123"));
    }

    @Test
    void testValidateBusinessRulesWithMissingXmlThrowsException() {
        AccountValidationService brokenService = new AccountValidationService() {
            @Override
            public void validateBusinessRules(ValidateArrangementForPaymentRequest request, WebServiceMessage message) {
                throw new SchemaValidationException("response1.xml not found in classpath");
            }
        };

        WebServiceMessage message = createEmptySoapMessage();
        ValidateArrangementForPaymentRequest request = new ValidateArrangementForPaymentRequest();

        assertThrows(SchemaValidationException.class, () ->
                brokenService.validateBusinessRules(request, message));
    }
}
