package com.rbs.bdd.application.service;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessageFactory;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import static org.junit.jupiter.api.Assertions.*;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

import java.io.InputStream;

class AccountValidationServiceTest {

    private final AccountValidationService accountValidationService = new AccountValidationService();

    @Test
    void testValidateSchemaShouldPassAndBusinessLogicShouldModifyFields() throws Exception {
        // 1. Load static-request XML
        InputStream requestStream = new ClassPathResource("static-request/static-request.xml").getInputStream();
        Source requestSource = new StreamSource(requestStream);

        // 2. Unmarshal the SOAP request to Java object
        ValidateArrangementForPaymentRequest request = JAXB.unmarshal(requestStream, ValidateArrangementForPaymentRequest.class);

        // 3. Create a SAAJ WebServiceMessage for response
        SaajSoapMessageFactory messageFactory = new SaajSoapMessageFactory();
        messageFactory.afterPropertiesSet(); // mandatory initialization
        WebServiceMessage message = messageFactory.createWebServiceMessage();

        // 4. Call schema + business rule validation
        accountValidationService.validateSchema(request);
        accountValidationService.validateBusinessRules(request, message);

        // 5. Extract and parse SOAP payload from response
        InputStream responseStream = ((SaajSoapMessage) message)
                .getSaajMessage()
                .getSOAPPart()
                .getContent()
                .getInputStream();  // works as SAAJ is underlying

        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(responseStream);
        XPath xpath = XPathFactory.newInstance().newXPath();

        // 6. Validate updated values
        Node systemId = (Node) xpath.evaluate(
                "//*[local-name()='responseId']/*[local-name()='systemId']",
                doc, XPathConstants.NODE);
        assertNotNull(systemId);
        assertEquals("ModifiedESP", systemId.getTextContent());

        Node transactionId = (Node) xpath.evaluate(
                "//*[local-name()='responseId']/*[local-name()='transactionId']",
                doc, XPathConstants.NODE);
        assertNotNull(transactionId);
        assertEquals("ModifiedTxn123", transactionId.getTextContent());
    }
}
