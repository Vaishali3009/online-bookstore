@Service
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        System.out.println("Schema validation successful");
    }

    @Override
    public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            // Load and unmarshal full SOAP response envelope
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response.xml");

            Envelope envelope = (Envelope) unmarshaller.unmarshal(xml);

            // Modify fields if needed
            ValidateArrangementForPaymentResponse response =
                    envelope.getBody().getValidateArrangementForPaymentResponse();

            ResponseHeader header = response.getResponse().getResponseHeader();
            String brand = request.getRequestHeader().getOperatingBrand();

            if ("ALL".equalsIgnoreCase(brand)) {
                ProcessingIdentifier id = header.getResponseId();
                if (id == null) id = new ProcessingIdentifier();
                id.setSystemId("ModifiedESP");
                id.setTransactionId("ModifiedTxn123");
                header.setResponseId(id);
            }

            // Marshal back to Source to preserve full static SOAP structure
            Marshaller marshaller = context.createMarshaller();
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            marshaller.marshal(envelope, output);
            return new StreamSource(new ByteArrayInputStream(output.toByteArray()));

        } catch (Exception e) {
            throw new RuntimeException("Failed to process response", e);
        }
    }
}
