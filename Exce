package com.rbs.bdd.infrastructure.soap.model;

import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Envelope", namespace = "http://schemas.xmlsoap.org/soap/envelope/")
@XmlAccessorType(XmlAccessType.FIELD)
public class Envelope {

    @XmlElement(name = "Body", namespace = "http://schemas.xmlsoap.org/soap/envelope/")
    private Body body;

    public Body getBody() {
        return body;
    }

    public void setBody(Body body) {
        this.body = body;
    }
}


-------------------


package com.rbs.bdd.infrastructure.soap.model;

import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

import javax.xml.bind.annotation.*;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {"validateArrangementForPaymentResponse"})
public class Body {

    @XmlElement(name = "validateArrangementForPaymentResponse",
            namespace = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/")
    private ValidateArrangementForPaymentResponse validateArrangementForPaymentResponse;

    public ValidateArrangementForPaymentResponse getValidateArrangementForPaymentResponse() {
        return validateArrangementForPaymentResponse;
    }

    public void setValidateArrangementForPaymentResponse(ValidateArrangementForPaymentResponse response) {
        this.validateArrangementForPaymentResponse = response;
    }
}


--------------/



package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.*;
import com.rbs.bdd.infrastructure.soap.model.Envelope;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.Unmarshaller;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {

    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        System.out.println("Schema validation triggered (handled by Spring WS interceptor)");
    }

    @Override
    public Source validateBusinessRules(ValidateArrangementForPaymentRequest request) {
        try {
            JAXBContext context = JAXBContext.newInstance(Envelope.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            InputStream xml = getClass().getClassLoader().getResourceAsStream("static-response/response.xml");

            if (xml == null) {
                throw new SchemaValidationException("Missing static SOAP response XML.");
            }

            Envelope envelope = (Envelope) unmarshaller.unmarshal(xml);

            if (envelope == null || envelope.getBody() == null || envelope.getBody().getValidateArrangementForPaymentResponse() == null) {
                throw new SchemaValidationException("Envelope or response body is null.");
            }

            ValidateArrangementForPaymentResponse response = envelope.getBody().getValidateArrangementForPaymentResponse();
            ResponseHeader header = response.getResponse().getResponseHeader();

            if ("ALL".equalsIgnoreCase(request.getRequestHeader().getOperatingBrand())) {
                ProcessingIdentifier id = header.getResponseId();
                if (id == null) {
                    id = new ProcessingIdentifier();
                    header.setResponseId(id);
                }
                id.setSystemId("ModifiedESP");
                id.setTransactionId("ModifiedTxn123");
            }

            // Marshal modified envelope back to Source
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            Marshaller marshaller = context.createMarshaller();
            marshaller.marshal(envelope, output);

            return new StreamSource(new ByteArrayInputStream(output.toByteArray()));
        } catch (Exception e) {
            throw new SchemaValidationException("Failed to process SOAP business response", e);
        }
    }
}





