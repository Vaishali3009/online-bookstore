package com.rbs.bdd.application.service;

import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.generated.*;
import com.rbs.bdd.infrastructure.soap.adapter.StaticResponseLoader;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class PaymentOrchestrator implements PaymentValidationPort {

    private final AccountValidationPort accountValidationPort;
    private final CustomerRetrievalService customerRetrievalService;

    @Override
    public ValidateArrangementForPaymentResponse validateAccountForPayment(ValidateArrangementForPaymentRequest request) {
        accountValidationPort.validateSchema(request);
        return StaticResponseLoader.loadAndModifyResponse("NWB", "USD");
    }

    @Override
    public RetrieveCustomerResponse retrieveCustomer(RetrieveCustomerRequest request) {
        return customerRetrievalService.retrieveCustomer(request);
    }
}


/////////////////////////



package com.rbs.bdd.infrastructure.soap.api;

import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbs.bdd.generated.*;
import lombok.RequiredArgsConstructor;
import org.springframework.ws.server.endpoint.annotation.*;

@Endpoint
@RequiredArgsConstructor
public class PaymentValidationSoapAdapter {

    private final PaymentValidationPort validationPort;

    private static final String NAMESPACE = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/";

    @PayloadRoot(namespace = NAMESPACE, localPart = "validateArrangementForPaymentRequest")
    @ResponsePayload
    public ValidateArrangementForPaymentResponse validateArrangement(@RequestPayload ValidateArrangementForPaymentRequest request) {
        return validationPort.validateAccountForPayment(request);
    }

    @PayloadRoot(namespace = NAMESPACE, localPart = "retrieveCustomerRequest")
    @ResponsePayload
    public RetrieveCustomerResponse retrieveCustomer(@RequestPayload RetrieveCustomerRequest request) {
        return validationPort.retrieveCustomer(request);
    }
}


------------------------

package com.rbs.bdd.infrastructure.soap.adapter;

import com.rbs.bdd.generated.ValidateArrangementForPaymentResponse;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;

public class StaticResponseLoader {

    public static ValidateArrangementForPaymentResponse loadAndModifyResponse(String operatingBrand, String currencyCode) {
        try {
            JAXBContext context = JAXBContext.newInstance(ValidateArrangementForPaymentResponse.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            InputStream is = StaticResponseLoader.class.getResourceAsStream("/static-response/response.xml");

            ValidateArrangementForPaymentResponse response = (ValidateArrangementForPaymentResponse) unmarshaller.unmarshal(is);

            // Modify only the fields you want
            response.getResponse().getResponseHeader().setOperatingBrand(operatingBrand);
            response.getResponse().getValidatedArrangement().getCurrency().getAlphabeticCode().setCodeValue(currencyCode);

            return response;
        } catch (Exception e) {
            throw new RuntimeException("Failed to load static SOAP response", e);
        }
    }
}


-------------------

package com.rbs.bdd.infrastructure.config;

import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.ApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.ws.config.annotation.EnableWs;
import org.springframework.ws.config.annotation.WsConfigurerAdapter;
import org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor;
import org.springframework.ws.transport.http.MessageDispatcherServlet;
import org.springframework.xml.xsd.SimpleXsdSchema;
import org.springframework.xml.xsd.XsdSchema;

import java.util.List;

@EnableWs
@Configuration
public class SoapWebServiceConfig extends WsConfigurerAdapter {

    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext ctx) {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContext(ctx);
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/ws/*");
    }

    @Bean
    public XsdSchema paymentSchema() {
        return new SimpleXsdSchema(new ClassPathResource("xsd/ArrValidationForPaymentParameters.xsd"));
    }

    @Override
    public void addInterceptors(List<org.springframework.ws.server.EndpointInterceptor> interceptors) {
        PayloadValidatingInterceptor schemaValidation = new PayloadValidatingInterceptor();
        schemaValidation.setValidateRequest(true);
        schemaValidation.setValidateResponse(false);
        schemaValidation.setXsdSchema(paymentSchema());

        interceptors.add(new SoapLoggingInterceptor());
        interceptors.add(schemaValidation);
    }
}


--------------

package com.rbs.bdd.infrastructure.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;

import java.io.ByteArrayOutputStream;

public class SoapLoggingInterceptor implements EndpointInterceptor {

    private static final Logger log = LoggerFactory.getLogger(SoapLoggingInterceptor.class);

    @Override
    public boolean handleRequest(MessageContext context, Object endpoint) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        context.getRequest().writeTo(baos);
        log.info("SOAP Request:\n{}", baos.toString("UTF-8"));
        return true;
    }

    @Override
    public boolean handleResponse(MessageContext context, Object endpoint) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        context.getResponse().writeTo(baos);
        log.info("SOAP Response:\n{}", baos.toString("UTF-8"));
        return true;
    }

    @Override
    public boolean handleFault(MessageContext context, Object endpoint) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        context.getResponse().writeTo(baos);
        log.error("SOAP Fault:\n{}", baos.toString("UTF-8"));
        return true;
    }

    @Override
    public void afterCompletion(MessageContext context, Object endpoint, Exception ex) {}
}

